#+TITLE: christiandewein.com
#+PROPERTY: header-args+ :comments both
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :tangle "/Users/fabrik42/.spacemacs.d/config/cbcom-config.el"

This is the repository of my personal website: christiandewein.com

The website is built by the static site generator [[https://jekyllrb.com/][Jekyll]]. However, this Readme also provides glue code that is used to integrate the editing experience of the website into my Emacs/Spacemacs setup.

* Spacemacs Integration
Require dependencies, necessary to setup the customizations.

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
#+END_SRC

This variables point to different paths of the project that are used throughout the scripts defined here.

#+BEGIN_SRC emacs-lisp
(defvar cbcom-base-path "/Users/fabrik42/dev/ruby/christiandewein_com"
  "Path to the base directory of the website.")

(defvar cbcom-org-path (concat cbcom-base-path "/_org")
  "Path to the directory that contains the source org files.")

(defvar cbcom-posts-path (concat cbcom-org-path "/_posts")
  "Path to the source files of the posts in the org-directory.")

(defvar cbcom-template-path (concat cbcom-org-path "/_post_template.org")
  "Path to the template file used to create new posts.")

(defvar cbcom-local-base-url "http://localhost:4000"
  "The base URL of the local Jekyll server")

(defvar cbcom-remote-base-url "https://christiandewein.com"
  "The base URL of the deployed website")
#+END_SRC
** Org Publishing aka HTML Export
Setup the publishing process for the =_org= directory. In this case, an HTML exporter and an exporter for static files (simple copy).

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist `(
  ("org-cbcom"
    :base-directory ,cbcom-org-path
    :base-extension "org"
    :publishing-directory ,cbcom-base-path
    :publishing-function org-html-publish-to-html
    :html-extension "html"
    :headline-levels 5
    :html-toplevel-hlevel 1
    :section-numbers nil
    :with-toc nil
    :with-sub-superscript nil
    :body-only t
    :exclude "_post_template.org"
    :recursive t)
  ("org-cbcom-static"
    :base-directory ,cbcom-org-path
    :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3"
    :publishing-directory ,cbcom-base-path
    :publishing-function org-publish-attachment
    :recursive t)
  ("org" :components ("org-cbcom" "org-cbcom-static"))))
#+END_SRC

Now, we would be able to publish (aka export as HTML) the org files by calling =(org-publish "org-cbcom")= and =(org-publish "org-static-cbcom")= directly.

But we want to autmate it. So we set up an =after-save-hook= that publishes all files, everytime an =.org= file in the website folder gets saved. Caching aka skipping of unchanged files is handled by the org publishing process automatically.

#+BEGIN_SRC emacs-lisp
(defun cbcom-publish-org-files ()
  "Publish org files on save."
  (when (and (string= (file-name-extension (buffer-file-name))
                      "org")
             (string-prefix-p cbcom-base-path
                              (buffer-file-name)))
    (org-publish "org-cbcom")))

(add-hook 'after-save-hook 'cbcom-publish-org-files)
#+END_SRC
** Create a new Post
Based on the template with the most important meta data structures, this function will create a new org-based post file.

#+BEGIN_SRC emacs-lisp
(defun cbcom-create-new-post ()
  (interactive)
  (let ((name (read-string "Enter title of new blog post: "))
        (date (format-time-string "%Y-%m-%d-"))
        (path cbcom-posts-path)
        (template-path cbcom-template-path))
    (let ((filename (concat path "/" date name ".org")))
      (with-temp-buffer
        (insert-file-contents template-path) ; Read the contents of the template file
        (goto-char (point-min))
        (while (search-forward "{%NAME%}" nil t) ; Replace all occurrences of {%NAME%}
          (replace-match name t t))
        (write-file filename))
      (find-file filename))))
#+END_SRC
** Process and Task Management
The management of the local dev processes and tasks is taken care of by [[https://github.com/rejeep/prodigy.el/tree/master][prodigy.el]] and its [[https://develop.spacemacs.org/layers/+tools/prodigy/README.html][Spacemacs layer]].

I think usually Prodigy is meant to manage long-running services like a dev server. However, I also want to use is for the short-lived =jekyll build= command. This does not work perfectly, but I added an additional status to signal that the build task is done.

#+BEGIN_SRC emacs-lisp
(prodigy-define-status :id 'done
  :face 'prodigy-green-face)
#+END_SRC

Hint from the official Prodigy README to make Jekyll processes work.

#+BEGIN_SRC emacs-lisp
(prodigy-define-tag :name 'jekyll
  :env '(("LANG" "en_US.UTF-8")
         ("LC_ALL" "en_US.UTF-8")))
#+END_SRC

*** Development Server
Start and stop the =jekyll serve= process within Prodigy/emacs and log the output to a dedicated buffer.

#+BEGIN_SRC emacs-lisp
(prodigy-define-service :name "cbcom Jekyll Server"
  :command "bundle"
  :args '("exec" "jekyll" "serve")
  :url cbcom-local-base-url
  :cwd cbcom-base-path
  :tags '(cbcom jekyll)
  :on-output (lambda (&rest args)
    (let ((output (plist-get args :output))
          (service (plist-get args :service)))
      (when (s-matches? "Server running..." output)
        (prodigy-set-status service 'ready))
      (when (s-matches? "...done" output)
        (prodigy-set-status service 'ready))
      (when (s-matches? "error" output)
        (prodigy-set-status service 'failed))
      (when (s-matches? "exception" output)
        (prodigy-set-status service 'failed)))))
#+END_SRC
*** Build Process
The Jekyll build task, defined as Prodigy service.

#+BEGIN_SRC emacs-lisp
(prodigy-define-service :name "cbcom Jekyll Build"
  :command "bundle"
  :args '("exec" "jekyll" "build")
  :cwd cbcom-base-path
  :tags '(cbcom jekyll)
  :on-output (lambda (&rest args)
    (let ((output (plist-get args :output))
          (service (plist-get args :service)))
      (when (s-matches? "Configuration file" output)
        (prodigy-set-status service 'ready))
      (when (s-matches? "done in " output)
        (prodigy-set-status service 'done))
      (when (s-matches? "error" output)
        (prodigy-set-status service 'failed))
      (when (s-matches? "exception" output)
        (prodigy-set-status service 'failed)))))
#+END_SRC
*** Deployment
Deploy the website using the =netflify cli= with Prodigy/emacs.

TODO: change to production deploy!

#+BEGIN_SRC emacs-lisp
(prodigy-define-service :name "cbcom Netflify Deploy"
  :command "netlify"
  :args '("deploy" "--dir" "./_site")
  :cwd cbcom-base-path
  :url cbcom-remote-base-url
  :tags '(cbcom)
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "Deploy path:" output)
                   (prodigy-set-status service 'ready))
                 (when (s-matches? "Deploy is live!" output)
                   (prodigy-set-status service 'done))
                 (when (s-matches? "error" output)
                   (prodigy-set-status service 'failed))
                 (when (s-matches? "exception" output)
                   (prodigy-set-status service 'failed)))))
#+END_SRC

** Transient Menu
[[https://magit.vc/manual/transient/][Transient]] is known as the library that powers the user interface of [[https://magit.vc][magit]].

These functions define "suffixes", basically the functions that get called at the end of the selection process in the transient UI.
Most of them are slim wrappers around functions defined above.

#+BEGIN_SRC emacs-lisp
(defun cbcom-suffix-open-prodigy ()
  "Start jekyll serve"
  (interactive)
  (prodigy))

(defun cbcom-suffix-open-jekyll-log ()
  "Open jekyll serve buffer"
  (interactive)
  (let ((service (prodigy-find-service "cbcom Jekyll Server")))
    (prodigy-switch-to-process-buffer service)
    ))

(defun cbcom-suffix-open-project ()
  "Open the website Projectile project in a new perspective (spacemacs layout)"
  (interactive)
  ;; Ensure the path ends with a slash
  (setq project-path (file-name-as-directory (expand-file-name cbcom-base-path)))
  ;; Create or switch to a perspective named after the last directory in the path
  (let ((project-name (file-name-nondirectory (directory-file-name project-path))))
    (persp-switch project-name)
    ;; Set the current project to the specified path
    (projectile-add-known-project project-path)
    ;; Switch to that project
    (projectile-switch-project-by-name project-path)))

(defun cbcom-suffix-browse-local ()
  "Open local website in browser"
  (interactive)
  (browse-url cbcom-local-base-url))

(defun cbcom-suffix-browse-deployed ()
  "Open deployed website in browser"
  (interactive)
  (browse-url cbcom-remote-base-url))

(defun cbcom-suffix-create-post ()
  "Create a new file for a new post"
  (interactive)
  (cbcom-create-new-post))
#+END_SRC

Here the actual transient menu is defined that links to the previously defined suffixes.

#+BEGIN_SRC emacs-lisp
(transient-define-prefix cbcom-layout-descriptions
  ()
  "Prefix with descriptions specified with slots."
  ["⭐️cb.com Command Center\n"
   ["Development"
    ("p" "Manage processes" cbcom-suffix-open-prodigy)
    ("l" "Open log buffer" cbcom-suffix-open-jekyll-log)]
   ["Files"
    ("o" "Open project folder" cbcom-suffix-open-project)
    ("b" "Open site in browser" cbcom-suffix-browse-local)
    ("c" "Open deployed site in browser" cbcom-suffix-browse-deployed)]
   ["Actions"
    ("N" "New Blog Post" cbcom-suffix-create-post)]])
#+END_SRC

In the end, we hook up the menu to a dedicated shortcut.

In our case, =SPC o b=.

#+BEGIN_SRC emacs-lisp
(defun cbcom-spacemacs-menu ()
  (interactive)
  (cbcom-layout-descriptions))

(spacemacs/set-leader-keys "ob" 'cbcom-spacemacs-menu)
#+END_SRC

Final adjustments, so this file can be required in the Spacemacs config file.

#+BEGIN_SRC emacs-lisp
(provide 'cbcom-config)
#+END_SRC
* Manual Deployment
** Build and deploy Jekyll site
#+begin_src sh :tangle no
bundle exec jekyll build
netlify deploy --prod --dir ./_site
#+end_src
** Create thumbs for articles
#+begin_src sh :tangle no
cd ./assets/uhk-review
rm *_w800.jpg
convert "*.jpg" -resize 800x -set filename:area "%t_w800" %[filename:area].jpg
convert "*.png" -resize 800x -set filename:area "%t_w800" %[filename:area].png
#+end_src
* Useful links
- [[https://www.mfoot.com/blog/2015/11/17/using-org-mode-to-write-jekyll-blogs/][Using org-mode to blog with Jekyll]]
- [[https://orgmode.org/manual/Publishing-options.html][Publishing options (The Org Manual)]]
- [[https://orgmode.org/worg/dev/org-export-reference.html][Org Export Reference Documentation]]
- [[https://github.com/positron-solutions/transient-showcase][positron-solutions/transient-showcase: Example forms for transient UI's in Emacs]]
- [[https://develop.spacemacs.org/layers/+tools/prodigy/README.html][Prodigy layer]] for Spacemacs powered by [[https://github.com/rejeep/prodigy.el][prodigy.el]]
- Possible alternatives for a task runner interface
  - [[https://github.com/casey/just][casey/just: 🤖 Just a command runner]]
  - [[https://github.com/psibi/justl.el][psibi/justl.el: Major mode for driving just files.]]
